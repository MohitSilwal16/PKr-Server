// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: proto/cli.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CliService_Register_FullMethodName                 = "/proto.CliService/Register"
	CliService_RegisterWorkspace_FullMethodName        = "/proto.CliService/RegisterWorkspace"
	CliService_RegisterUserToWorkspace_FullMethodName  = "/proto.CliService/RegisterUserToWorkspace"
	CliService_RequestPunchFromReceiver_FullMethodName = "/proto.CliService/RequestPunchFromReceiver"
	CliService_NotifyNewPushToListeners_FullMethodName = "/proto.CliService/NotifyNewPushToListeners"
	CliService_GetAllWorkspaces_FullMethodName         = "/proto.CliService/GetAllWorkspaces"
)

// CliServiceClient is the client API for CliService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CliServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	RegisterWorkspace(ctx context.Context, in *RegisterWorkspaceRequest, opts ...grpc.CallOption) (*RegisterWorkspaceResponse, error)
	RegisterUserToWorkspace(ctx context.Context, in *RegisterUserToWorkspaceRequest, opts ...grpc.CallOption) (*RegisterUserToWorkspaceResponse, error)
	RequestPunchFromReceiver(ctx context.Context, in *RequestPunchFromReceiverRequest, opts ...grpc.CallOption) (*RequestPunchFromReceiverResponse, error)
	NotifyNewPushToListeners(ctx context.Context, in *NotifyNewPushToListenersRequest, opts ...grpc.CallOption) (*NotifyNewPushToListenersResponse, error)
	GetAllWorkspaces(ctx context.Context, in *GetAllWorkspacesRequest, opts ...grpc.CallOption) (*GetAllWorkspacesResponse, error)
}

type cliServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCliServiceClient(cc grpc.ClientConnInterface) CliServiceClient {
	return &cliServiceClient{cc}
}

func (c *cliServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, CliService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliServiceClient) RegisterWorkspace(ctx context.Context, in *RegisterWorkspaceRequest, opts ...grpc.CallOption) (*RegisterWorkspaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterWorkspaceResponse)
	err := c.cc.Invoke(ctx, CliService_RegisterWorkspace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliServiceClient) RegisterUserToWorkspace(ctx context.Context, in *RegisterUserToWorkspaceRequest, opts ...grpc.CallOption) (*RegisterUserToWorkspaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserToWorkspaceResponse)
	err := c.cc.Invoke(ctx, CliService_RegisterUserToWorkspace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliServiceClient) RequestPunchFromReceiver(ctx context.Context, in *RequestPunchFromReceiverRequest, opts ...grpc.CallOption) (*RequestPunchFromReceiverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestPunchFromReceiverResponse)
	err := c.cc.Invoke(ctx, CliService_RequestPunchFromReceiver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliServiceClient) NotifyNewPushToListeners(ctx context.Context, in *NotifyNewPushToListenersRequest, opts ...grpc.CallOption) (*NotifyNewPushToListenersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyNewPushToListenersResponse)
	err := c.cc.Invoke(ctx, CliService_NotifyNewPushToListeners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliServiceClient) GetAllWorkspaces(ctx context.Context, in *GetAllWorkspacesRequest, opts ...grpc.CallOption) (*GetAllWorkspacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllWorkspacesResponse)
	err := c.cc.Invoke(ctx, CliService_GetAllWorkspaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CliServiceServer is the server API for CliService service.
// All implementations must embed UnimplementedCliServiceServer
// for forward compatibility.
type CliServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	RegisterWorkspace(context.Context, *RegisterWorkspaceRequest) (*RegisterWorkspaceResponse, error)
	RegisterUserToWorkspace(context.Context, *RegisterUserToWorkspaceRequest) (*RegisterUserToWorkspaceResponse, error)
	RequestPunchFromReceiver(context.Context, *RequestPunchFromReceiverRequest) (*RequestPunchFromReceiverResponse, error)
	NotifyNewPushToListeners(context.Context, *NotifyNewPushToListenersRequest) (*NotifyNewPushToListenersResponse, error)
	GetAllWorkspaces(context.Context, *GetAllWorkspacesRequest) (*GetAllWorkspacesResponse, error)
	mustEmbedUnimplementedCliServiceServer()
}

// UnimplementedCliServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCliServiceServer struct{}

func (UnimplementedCliServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedCliServiceServer) RegisterWorkspace(context.Context, *RegisterWorkspaceRequest) (*RegisterWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorkspace not implemented")
}
func (UnimplementedCliServiceServer) RegisterUserToWorkspace(context.Context, *RegisterUserToWorkspaceRequest) (*RegisterUserToWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUserToWorkspace not implemented")
}
func (UnimplementedCliServiceServer) RequestPunchFromReceiver(context.Context, *RequestPunchFromReceiverRequest) (*RequestPunchFromReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPunchFromReceiver not implemented")
}
func (UnimplementedCliServiceServer) NotifyNewPushToListeners(context.Context, *NotifyNewPushToListenersRequest) (*NotifyNewPushToListenersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyNewPushToListeners not implemented")
}
func (UnimplementedCliServiceServer) GetAllWorkspaces(context.Context, *GetAllWorkspacesRequest) (*GetAllWorkspacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWorkspaces not implemented")
}
func (UnimplementedCliServiceServer) mustEmbedUnimplementedCliServiceServer() {}
func (UnimplementedCliServiceServer) testEmbeddedByValue()                    {}

// UnsafeCliServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CliServiceServer will
// result in compilation errors.
type UnsafeCliServiceServer interface {
	mustEmbedUnimplementedCliServiceServer()
}

func RegisterCliServiceServer(s grpc.ServiceRegistrar, srv CliServiceServer) {
	// If the following call pancis, it indicates UnimplementedCliServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CliService_ServiceDesc, srv)
}

func _CliService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CliService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliService_RegisterWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServiceServer).RegisterWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CliService_RegisterWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServiceServer).RegisterWorkspace(ctx, req.(*RegisterWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliService_RegisterUserToWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserToWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServiceServer).RegisterUserToWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CliService_RegisterUserToWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServiceServer).RegisterUserToWorkspace(ctx, req.(*RegisterUserToWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliService_RequestPunchFromReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPunchFromReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServiceServer).RequestPunchFromReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CliService_RequestPunchFromReceiver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServiceServer).RequestPunchFromReceiver(ctx, req.(*RequestPunchFromReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliService_NotifyNewPushToListeners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyNewPushToListenersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServiceServer).NotifyNewPushToListeners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CliService_NotifyNewPushToListeners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServiceServer).NotifyNewPushToListeners(ctx, req.(*NotifyNewPushToListenersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliService_GetAllWorkspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllWorkspacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServiceServer).GetAllWorkspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CliService_GetAllWorkspaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServiceServer).GetAllWorkspaces(ctx, req.(*GetAllWorkspacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CliService_ServiceDesc is the grpc.ServiceDesc for CliService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CliService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CliService",
	HandlerType: (*CliServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _CliService_Register_Handler,
		},
		{
			MethodName: "RegisterWorkspace",
			Handler:    _CliService_RegisterWorkspace_Handler,
		},
		{
			MethodName: "RegisterUserToWorkspace",
			Handler:    _CliService_RegisterUserToWorkspace_Handler,
		},
		{
			MethodName: "RequestPunchFromReceiver",
			Handler:    _CliService_RequestPunchFromReceiver_Handler,
		},
		{
			MethodName: "NotifyNewPushToListeners",
			Handler:    _CliService_NotifyNewPushToListeners_Handler,
		},
		{
			MethodName: "GetAllWorkspaces",
			Handler:    _CliService_GetAllWorkspaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cli.proto",
}
